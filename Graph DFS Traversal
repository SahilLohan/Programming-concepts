stack<int> s;

void DFS(vector<vector<int>>& g,vector<int>& vis,int node)
{
    s.push(node);
    vis[node]=1;
    while(!s.empty())
    {
        for(auto adjacent_node:g[node])
        {
            if(!vis[adjacent_node])
            {
                s.push(adjacent_node);
                vis[adjacent_node]=1;
            }
        }
        
        node=s.top();
        s.pop();
        
        cout<<node<<" ";
        
    }
}

void printByDFS(vector<vector<int>>& g)     // call this method(for 1 based indexing)
{
    vector<int> vis(g.size(),0);
    vis[0]=1;
    
    for(int i=1;i<g.size();i++)
    {
        if(!vis[i])
        {
            DFS(g,vis,i);
        }
    }
    
    cout << endl;
}
